---
# external variables:
# operation - what to perform (see below)
# lesson - where the '_primer_nodes.yml' file should be found
#     this is cached in the `.current` file at the top directory
#
#  operation is one of the following:
#    start     - build and start the nodes for this lesson (default)
#    stop      - stop and remove the nodes for the current lesson
#    restart   - stop the current nodes and start new ones
#    rebuild   - stop the current nodes, rebuild the images and start new nodes
#    finish    - stop the current nodes, remove images and remove .current file

- name: Setup containers for lesson
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # our 'state' file
    current_file: "{{ playbook_dir }}/.current"
    # generated key location
    ssh_keyfile: "setup/ssh-key"
    # we'll be reusing the same images
    # the base images are standard from Docker Hub
    images:
      - name: primer-ubuntu
        image: ubuntu:focal
      - name: primer-amazon
        image: amazonlinux:2
      - name: primer-rocky
        image: rockylinux/rockylinux
    operation: start
    # lists of operation values
    to_start:
      - start
      - restart
      - rebuild
    to_build:
      - rebuild
    to_stop:
      - stop
      - restart
    to_remove:
      - finish
      - rebuild
    # the 'current' is the value in the state file
    # the default is no state
    current: ""

  tasks:

    # check if the state file exists
    - name: Check current lesson state file
      stat:
        path: "{{ current_file }}"
      register: current_state_file
      tags:
        - always
        - state

    # read the state using a file lookup plugin
    - name: Current lesson
      when: current_state_file.stat.exists
      ignore_errors: true
      set_fact:
        current: "{{ lookup('file', current_file) }}"
      tags:
        - always
        - state

    # if no state file and `lesson` not passed in
    - name: Check for a lesson
      when: current == "" and lesson is not defined
      fail:
        msg: "Must supply `lesson`"

    # if lesson not passed in, then use the value
    # from the state file
    - name: Check that some lesson exists
      when: lesson is not defined
      set_fact:
        lesson: "{{ current }}"
      tags:
        - always

    # user feedback
    - name: This lesson
      debug:
        msg: "The lesson setup is {{ lesson }}"

    # check if the current leasson has a playbook
    - name: Is there a provisioning playbook
      stat:
        path: "{{ lesson }}/_primer_provisioning.yml"
      register: provisioning
      tags:
        - vms

    # load the nodes.yml file and place in `this` variable
    - name: Load new lesson nodes
      include_vars:
        file: "{{ playbook_dir }}/{{ lesson }}/_primer_nodes.yml"
        name: this
      tags:
        - vms

    # load the nodes.yml file of the "current" lesson and
    # place in `old` variable
    - name: Load current lesson nodes
      when: current != ""
      include_vars:
        file: "{{ playbook_dir }}/{{ current }}/_primer_nodes.yml"
        name: old
      tags:
        - vms

    # generate a new SSH key pair
    - name: Generate SSH key
      community.crypto.openssh_keypair:
        path: "{{ ssh_keyfile }}"
        comment: "primer key"
        mode: 0700
        size: 1024
        type: "rsa"
      register: sshkey
      tags:
        - vms

    # stop any containers specified in the current (`old`) nodes.yml
    - name: Stop the containers
      when: operation in (to_stop + to_remove) or current != lesson or sshkey is changed
      failed_when: false
      community.docker.docker_container:
        state: "absent"
        force_kill: "{{ old.force_kill | default(false) }}"
        name: "{{ item.altname | default(old.name + '-' + item.name) }}"
        container_default_behavior: compatibility
      loop: "{{ (old is defined) | ternary(old.nodes, []) }}"
      tags:
        - vms

    # remove the custom images, if necessary
    - name: Remove the images
      when: operation in to_remove or (sshkey is defined and sshkey is changed)
      community.docker.docker_image:
        state: absent
        source: local
        name: "{{ item.name }}"
      loop: "{{ images }}"
      tags:
        - images

    # remove the base images too, when finished with the lessons
    - name: Remove base images
      when: operation == 'finish'
      community.docker.docker_image:
        state: absent
        name: "{{ item.image }}"
      loop: "{{ images }}"
      tags:
        - images

    # build and tag the custom iamges
    - name: Build images
      when: operation in (to_build + to_start)
      tags:
        - images
      block:

        # source==pull vs source==build
        # for each entry in `images`
        - name: Pull base image
          community.docker.docker_image:
            name: "{{ item.image }}"
            source: pull
          loop: "{{ images }}"

        # using setup/Dockerfile
        - name: Build docker images
          community.docker.docker_image:
            state: present
            name: "{{ item.name }}"
            source: build
            force_source: "{{ operation in to_build }}"
            build:
              path: "setup"
              args:
                BASEIMAGE: "{{ item.image }}"
          loop: "{{ images }}"

    # start the nodes for this lesson
    # if the node has `altname`, use that instead of the
    # constructed
    - name: Start docker containers
      when: operation in to_start
      community.docker.docker_container:
        state: started
        # use altname or '{lesson}-{name}"
        name: "{{ item.altname | default(this.name + '-' + item.name) }}"
        image: "{{ item.image }}"
        # merge node's 'labels' with standard labels
        labels: "{{ item.labels | default({}) | combine(local_labels) }}"
        stop_timeout: 100
        entrypoint: "{{ item.entrypoint | default(omit) }}"
        exposed_ports: "{{ this.nodes.ports | default(omit) }}"
        container_default_behavior: no_defaults
      loop: "{{ this.nodes }}"
      register: vms
      vars:
          local_labels:
              app: ansible-primer
              group: "{{ item.group | default(omit) }}"
              lesson: "{{ this.name }}"
              name: "{{ item.name }}"
      tags:
        - vms

    # add the new hosts to the inventory in the `newhosts` group
    - name: New hosts
      no_log: true
      when: item.invocation is defined
      ansible.builtin.add_host:
        name: "{{ item.invocation.module_args.name }}"
        groups: newhosts
        ansible_connection: docker
      loop: "{{ vms.results }}"
      tags:
        - vms

    # save the lesson to the state file
    - name: Save lesson
      when: current != lesson and operation != 'finish'
      ansible.builtin.copy:
        content: "{{ lesson }}\n"
        dest: "{{ current_file }}"
      tags:
        - state

    # if we are finished, delete the state file
    - name: Cleanup
      when: operation == "finish"
      ansible.builtin.file:
        state: absent
        path: "{{ current_file }}"
      tags:
        - state

- name: Post-creation provisioning
  hosts: newhosts
  tasks:
    # if it exists, then run the provisioning task file
    # found earlier
    - name: Per-lesson provision
      when: hostvars.localhost.provisioning.stat.exists
      ansible.builtin.include_tasks:
        file: "{{ hostvars.localhost.provisioning.stat.path }}"
      tags:
        - vms
